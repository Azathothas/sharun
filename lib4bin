#!/usr/bin/env bash

# deps: apt update && apt install bash file binutils patchelf findutils grep sed coreutils -y
# deps: apk add bash file binutils patchelf findutils grep sed coreutils
# deps: dnf install bash file binutils patchelf findutils grep sed coreutils -y
# deps: pacman -Sy bash file binutils patchelf findutils grep sed coreutils --noconfirm
# deps: xbps-install -Sy bash file binutils patchelf findutils grep sed coreutils

RED='\033[1;91m'
BLUE='\033[1;94m'
GREEN='\033[1;92m'
YELLOW='\033[1;33m'
RESETCOLOR='\033[1;00m'

ONE_DIR=${ONE_DIR:=1}
DST_DIR=${DST_DIR:=.}
CREATE_LINKS=${CREATE_LINKS:=1}

STRIP=${STRIP:=0}
VERBOSE=${VERBOSE:=0}
LIBS_ONLY=${LIBS_ONLY:=0}
HARD_LINKS=${HARD_LINKS:=0}
PATCH_RPATH=${PATCH_RPATH:=0}
GEN_LIB_PATH=${GEN_LIB_PATH:=0}
ANY_EXECUTABLE=${ANY_EXECUTABLE:=0}
PATCH_INTERPRETER=${PATCH_INTERPRETER:=0}
# BINARY_LIST=('/path/executable' '/path/executable')

usage() {
    echo -e "$YELLOW[ Usage ]: ${GREEN}$(basename "$0") ${RED}[options] ${BLUE}/path/executable$RESETCOLOR\n"
    echo "Options:"
    echo "  -s, --strip              Strip binaries and libraries (env: STRIP=1)"
    echo "  -v, --verbose            Verbose mode (env: VERBOSE=1) "
    echo "  -d, --dst-dir '/path'    Destination directory (env: DST_DIR=/path)"
    echo "  -n, --not-one-dir        Separate directories for each executable (env: ONE_DIR=0)"
    echo "  -l, --libs-only          Pack only libraries (env: LIBS_ONLY=1)"
    echo "  -p, --hard-links         Create hard links to sharun (env: HARD_LINKS=1)"
    echo "  -r, --patch-rpath        Patch RPATH to a relative path (env: PATCH_RPATH=1)"
    echo "  -g, --gen-lib-path       Generate a lib.path file (env: GEN_LIB_PATH=1)"
    echo "  -a, --any-executable     Pack any executable (env: ANY_EXECUTABLE=1)"
    echo "  -i, --patch-interpreter  Patch INTERPRETER to a relative path (env: PATCH_INTERPRETER=1)"
    echo "  -h, --help               Show this message"
    exit 1
}

check_deps() {
    local ret=0
    local binaries=(file patchelf find grep sed)
    [ "$STRIP" == 1 ] && binaries+=(strip)
    for bin in "${binaries[@]}"
        do ! command -v $bin &>/dev/null && \
        echo -e "$RED[ ERROR ]: $BLUE[$bin]$YELLOW not found!$RESETCOLOR" && \
        ret=1
    done
    if [ "$ret" != 0 ]
        then
            echo -e "${GREEN}You need to install lib4bin dependencies: ${BLUE}file binutils patchelf findutils grep sed coreutils$RESETCOLOR"
            exit 1
    fi
}

try_strip() {
    if [ "$STRIP" == 1 ]
        then
            echo -e "$YELLOW[ STRIP ]: $BLUE[$1]$RESETCOLOR"
            strip -s -R .comment --strip-unneeded "$1"
    fi
}

try_set_rpath() {
    if [ "$PATCH_RPATH" == 1 ]
        then
            echo -e "$YELLOW[ SET RPATH ]: $BLUE[$1]$RESETCOLOR"
            patchelf --set-rpath '$ORIGIN/../lib:$ORIGIN/../lib32' "$1"
    fi
}

print_needed() { patchelf --print-needed "$1" 2>/dev/null ; }

ldd_libs() {
    ldd "$1" 2>/dev/null|grep '/lib'|cut -d'>' -f2|sed 's| (.*)||g'|sed 's|^[[:space:]]*||g'
}

get_libs() {
    [ -n "$2" ] && local needed_libs="$2"||\
    local needed_libs="$(print_needed "$1")"
    local libs="$(([ -z "$needed_libs" ]||\
        grep -E "$(tr '\n' '|'<<<"$needed_libs")libpthread.so.0"<<<"$ALL_LIBS" ; \
        ldd_libs "$1")|sort -u)"
    [ -n "$IS_ELF32" ] && \
    local libs="$(grep -vE '/lib/|/lib64/|/x86_64-linux-gnu/'<<<"$libs")"||\
    local libs="$(grep -vE '/lib32|/i386-linux-gnu'<<<"$libs")"
    for lib in $libs
        do local libs4libs="$(echo -e "$(ldd_libs "$lib")\n$libs4libs")"
    done
    echo -e "$libs\n$libs4libs"|sort -u|sed '/^$/d'
}

repath_needed_libs() {
    [ -n "$2" ] && local needed_libs="$2"||\
    local needed_libs="$(print_needed "$1")"
    local patch_needed_libs="$(grep '^/'<<<"$needed_libs")"
    if [ -n "$patch_needed_libs" ]
        then
            for lib in $patch_needed_libs
                do
                    local relib="$(basename "$lib")"
                    echo -e "$YELLOW[ REPATH NEEDED ]: $BLUE[$lib -> $relib]$RESETCOLOR"
                    patchelf --replace-needed "$lib" "$relib" "$1"
            done
    fi
}

find_so() { find "$@" -name '*.so' -o -name '*.so.*' 2>/dev/null; }

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h|--help) usage ;;
        -s|--strip) STRIP=1; shift ;;
        -v|--verbose) VERBOSE=1; shift ;;
        -n|--not-one-dir) ONE_DIR=0; shift ;;
        -l|--libs-only) LIBS_ONLY=1; shift ;;
        -p|--hard-links) HARD_LINKS=1; shift ;;
        -r|--patch-rpath) PATCH_RPATH=1; shift ;;
        -g|--gen-lib-path) GEN_LIB_PATH=1; shift ;;
        -a|--any-executable) ANY_EXECUTABLE=1; shift ;;
        -i|--patch-interpreter) PATCH_INTERPRETER=1; shift ;;
        -d|--dst-dir)
            if [[ -n "$2" && "$2" != -* ]]
                then DST_DIR="$2"; shift 2 
                else
                    echo -e "$RED[ ERROR ]: ${YELLOW}Option ${BLUE}$1 ${YELLOW}requires a non-empty argument!$RESETCOLOR\n"
                    usage
            fi
            ;;
         -*) echo "Unknown parameter: $1"; usage ;;
        *) break ;;
    esac
done

check_deps

[ "$VERBOSE" == 1 ] && \
varg='-v'||unset varg

if [ ! -n "$BINARY_LIST" ]
    then
        if [ -n "$1" ]
            then
                BINARY_LIST=("$@")
            else
                echo -e "$RED[ ERROR ]: Specify the executable!$RESETCOLOR"
                usage
        fi
fi

ALL_LIBS="$(find_so \
    /usr/lib /usr/libexec /usr/lib64 \
    /usr/lib32 /lib /lib64 /lib32 \
    |sort -u \
)"

try_mkdir() {
    if [ ! -d "$1" ]
        then mkdir $varg -p "$1"||exit 1
    fi
}

binary_number=1
declare -A DST_DIRS
declare -A BINARIES
declare -A LIBRARIES
for binary in "${BINARY_LIST[@]}"
    do
        unset binary_real_name
        if [ -L "$binary" ]
            then
                binary_src_pth="$(readlink -f "$binary")"
                binary_real_name="$(basename "$binary_src_pth")"
            else
                binary_src_pth="$binary"
        fi
        if [[ "${BINARIES["$binary_src_pth"]}" != 1 ]]
            then
                binary_name="$(basename "$binary")"
                if [ "$ONE_DIR" == 1 ]
                    then
                        dst_dir_pth="${DST_DIR}/shared"
                        sharun_bin_dir_pth="${DST_DIR}/bin"
                    else
                        dst_dir_pth="${DST_DIR}/${binary_name}/shared"
                        sharun_bin_dir_pth="${DST_DIR}/${binary_name}/bin"
                fi
                [[ -f "$dst_dir_pth" || -L "$dst_dir_pth" ]] && \
                    dst_dir_pth="${dst_dir_pth}.dir"
                DST_DIRS["$dst_dir_pth"]=
                bin_dir_pth="${dst_dir_pth}/bin"
                FILE_INFO="$(file "$binary_src_pth" 2>/dev/null)"
                IS_ELF="$(grep -o 'ELF '<<<"$FILE_INFO")"
                IS_ELF32="$(grep -q 'ELF 32-bit'<<<"$FILE_INFO")"
                IS_EXECUTABLE="$(grep -o 'executable'<<<"$FILE_INFO")"
                echo -e "$YELLOW[ $binary_number ]: $BLUE[$binary_name] ${GREEN}...$RESETCOLOR"
                if [ -n "$IS_EXECUTABLE" ] && [[ "$ANY_EXECUTABLE" == 1 || -n "$IS_ELF" ]]
                    then
                        # strace -f -e trace=openat "$binary_src_pth"|& grep '/lib.*\.so'|grep -v ENOENT|\
                        # awk '{print$2}'|sed 's|^.||g;s|..$||g'|sort -u|xargs -I {} cp -f {} shared/lib/
                        needed_libs="$(print_needed "$binary_src_pth")"
                        LIBS="$(get_libs "$binary_src_pth" "$needed_libs")"
                        if [[ -n "$LIBS" || "$ANY_EXECUTABLE" == 1 ]]
                            then
                                if [ "$LIBS_ONLY" != 1 ]
                                    then
                                        if [ -n "$LIBS" ]
                                            then INTERPRETER="$(basename "$(grep 'ld-linux'<<<"$LIBS"|cut -d'=' -f1|sed 's|\t||' )")"
                                            else bin_dir_pth="$sharun_bin_dir_pth"
                                        fi
                                        try_mkdir "$bin_dir_pth"
                                        binary_dst_pth="$bin_dir_pth/$binary_name"
                                        if [ -n "$binary_real_name" ]
                                            then
                                                if [ ! -f "$bin_dir_pth/$binary_real_name" ]
                                                    then cp $varg -f "$binary_src_pth" "$bin_dir_pth/"||exit 1
                                                fi
                                                if [[ "$binary_name" != "$binary_real_name" && ! -L "$binary_dst_pth" ]]
                                                    then (cd "$bin_dir_pth"||exit 1
                                                        ln $varg -sf "$binary_real_name" "$binary_name"||exit 1)||exit 1
                                                fi
                                            else
                                                if [ ! -f "$binary_dst_pth" ]
                                                    then cp $varg -f "$binary_src_pth" "$bin_dir_pth/"||exit 1
                                                fi
                                        fi
                                        if [ -n "$IS_ELF" ]
                                            then try_strip "$binary_dst_pth"||exit 1
                                        fi
                                        if [ -n "$LIBS" ]
                                            then
                                                repath_needed_libs "$binary_dst_pth" "$needed_libs"||exit 1
                                                try_set_rpath "$binary_dst_pth"||exit 1
                                                if [ "$CREATE_LINKS" == 1 ]
                                                    then
                                                        try_mkdir "$sharun_bin_dir_pth"
                                                        [ "$HARD_LINKS" == 1 ] && \
                                                            ln_args='-Pf'||ln_args='-sf'
                                                        (cd "$sharun_bin_dir_pth"||exit 1
                                                        ln $varg $ln_args ../sharun "$binary_name"||exit 1
                                                        if [ -n "$binary_real_name" ]
                                                            then ln $varg $ln_args ../sharun "$binary_real_name"||exit 1
                                                        fi)||exit 1
                                                fi
                                        fi
                                fi
                                for lib_src_pth in $LIBS
                                    do
                                        if [[ "${LIBRARIES["$lib_src_pth"]}" != 1 ]]
                                            then
                                                unset lib_src_real_pth
                                                if [ -L "$lib_src_pth" ]
                                                    then
                                                        lib_src_real_pth="$(readlink -f "$lib_src_pth")"
                                                        lib_src_dirname_pth="$(dirname "$lib_src_real_pth")"
                                                    else
                                                        lib_src_dirname_pth="$(dirname "$lib_src_pth")"
                                                fi
                                                lib_src_name="$(basename "$lib_src_pth")"
                                                grep -qE '/lib32|/i386-linux-gnu'<<<"$lib_src_dirname_pth" && \
                                                    lib_dir="lib32"||lib_dir="lib"
                                                lib_dst_dir_pth="${dst_dir_pth}/${lib_dir}$(sed 's|^/usr||;s|^/lib64||;s|^/lib32||;s|^/lib||;s|^/i386-linux-gnu||;s|^/x86_64-linux-gnu||'<<<"$lib_src_dirname_pth")"
                                                lib_dst_pth="$lib_dst_dir_pth/$lib_src_name"
                                                try_mkdir "$lib_dst_dir_pth"
                                                if [ -n "$lib_src_real_pth" ]
                                                        then
                                                            lib_src_real_name="$(basename "$lib_src_real_pth")"
                                                            if [ ! -f "$lib_dst_dir_pth/$lib_src_real_name" ]
                                                                then cp $varg -f "$lib_src_real_pth" "$lib_dst_dir_pth/"||exit 1
                                                            fi
                                                            if [[ "$lib_src_name" != "$lib_src_real_name" && ! -L "$lib_dst_pth" ]]
                                                                then 
                                                                    (cd "$lib_dst_dir_pth"||exit 1
                                                                    if [ ! -L "$lib_src_name" ]
                                                                        then ln $varg -sf "$lib_src_real_name" "$lib_src_name"||exit 1
                                                                    fi)||exit 1
                                                            fi
                                                        else
                                                            if [ ! -f "$lib_dst_pth" ]
                                                                then cp $varg -f "$lib_src_pth" "$lib_dst_dir_pth/"||exit 1
                                                            fi
                                                fi
                                                repath_needed_libs "$lib_dst_pth"||exit 1
                                                try_strip "$lib_dst_pth"||exit 1
                                                if [[ ! "$lib_dst_pth" =~ "$INTERPRETER" ]]
                                                    then try_set_rpath "$lib_dst_pth"||exit 1
                                                fi
                                                LIBRARIES["$lib_src_pth"]=1
                                        fi
                                done
                                if [[ "$LIBS_ONLY" != 1 && -n "$INTERPRETER" && "${BINARIES["$lib_src_pth"]}" != 1 ]]
                                    then
                                        (cd "$bin_dir_pth"||exit 1
                                        if [[ "$PATCH_INTERPRETER" == 1 && -f "../$lib_dir/$INTERPRETER" ]]
                                            then
                                                echo -e "$YELLOW[ SET INTERPRETER ]: $BLUE[$bin_dir_pth/$binary_name -> ../$lib_dir/$INTERPRETER]$RESETCOLOR"
                                                patchelf --set-interpreter "../$lib_dir/$INTERPRETER" "$binary_name"||exit 1
                                        fi)||exit 1
                                fi
                                echo -e "$GREEN[ DONE ]$RESETCOLOR"
                                binary_number=$(( $binary_number + 1 ))
                            else
                                echo -e "$YELLOW[ SKIPPED ]: $BLUE[$binary_src_pth]$YELLOW executable not dynamically linked!$RESETCOLOR"
                        fi
                    else
                        echo -e "$YELLOW[ SKIPPED ]: $BLUE[$binary_src_pth]$YELLOW not ELF executable!$RESETCOLOR"
                fi
                BINARIES["$binary_src_pth"]=1
        fi
done
unset BINARIES LIBRARIES

if [ "$GEN_LIB_PATH" == 1 ]
    then
        for dst_dir in "${!DST_DIRS[@]}"
            do
                (cd "$dst_dir"||exit 1
                for lib_dir in lib lib32
                    do
                        if [ -d "$lib_dir" ]
                            then
                                echo -e "$YELLOW[ GEN LIB PATH ]: $BLUE[${dst_dir}/${lib_dir}/lib.path]$RESETCOLOR" && \
                                find_so "$lib_dir"|xargs -I {} dirname "{}"|\
                                sort -u|sed "s|$lib_dir|+|g" > "$lib_dir/lib.path"||exit 1
                        fi
                done)||exit 1
        done
fi
