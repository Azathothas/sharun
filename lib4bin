#!/bin/bash

# deps: apt update && apt install bash file binutils patchelf findutils -y
# deps: apk add bash file binutils patchelf findutils
# deps: dnf install bash file binutils patchelf findutils -y
# deps: pacman -Sy bash file binutils patchelf findutils --noconfirm
# deps: xbps-install -Sy bash file binutils patchelf findutils

RED='\033[1;91m'
BLUE='\033[1;94m'
GREEN='\033[1;92m'
YELLOW='\033[1;33m'
RESETCOLOR='\033[1;00m'

STRIP=${STRIP:=1}
ONE_DIR=${ONE_DIR:=1}
CREATE_LINKS=${CREATE_LINKS:=1}
#HARD_LINKS=1
#LIBS_ONLY=1
#BINARY_LIST=''
#DST_DIR_PATH=''
#STATIC_BINARY=1
#PATCH_RPATH=1
#PATCH_INTERPRETER=1

try_strip() {
    [ "$STRIP" == 1 ] && \
        strip -s -R .comment --strip-unneeded "$1"
}

try_set_rpath() {
    [ "$PATCH_RPATH" == 1 ] && \
        patchelf --set-rpath '$ORIGIN/../lib:$ORIGIN/../lib32' "$1"
}

print_needed() { patchelf --print-needed "$1" 2>/dev/null ; }

ldd_libs() {
    ldd "$1" 2>/dev/null|grep '/lib'|cut -d'>' -f2|sed 's| (.*)||g'|sed 's|^[[:space:]]*||g'
}

get_libs() {
    [ -n "$2" ] && local needed_libs="$2"||\
    local needed_libs="$(print_needed "$1")"
    local libs="$(([ -z "$needed_libs" ]||\
        grep -E "$(tr '\n' '|'<<<"$needed_libs"|sed 's|.$||')"<<<"$ALL_LIBS" ; \
        ldd_libs "$1")|sort -u)"
    [ -n "$IS_ELF32" ] && \
    local libs="$(grep -vE '/lib/|/lib64/|/x86_64-linux-gnu/'<<<"$libs")"||\
    local libs="$(grep -vE '/lib32|/i386-linux-gnu'<<<"$libs")"
    for lib in $libs
        do local libs4libs="$(echo -e "$(ldd_libs "$lib")\n$libs4libs")"
    done
    echo -e "$libs\n$libs4libs"|sort -u|sed '/^$/d'
}

repath_needed_libs() {
    [ -n "$2" ] && local needed_libs="$2"||\
    local needed_libs="$(print_needed "$1")"
    local patch_needed_libs="$(grep '^/'<<<"$needed_libs")"
    [ -n "$patch_needed_libs" ] && \
    for lib in $patch_needed_libs
        do patchelf --replace-needed "$lib" "$(basename "$lib")" "$1"
    done
}

#IFS=$'\n'
if [ ! -n "$BINARY_LIST" ]
    then
        if [ -n "$1" ]
            then
                BINARY_LIST="$@"
            else
                echo -e "$RED[ ERROR ]: Specify the ELF binary executable!$RESETCOLOR"
                exit 1
        fi
fi
[[ "$ONE_DIR" == 1 && ! -n "$DST_DIR_PATH" ]] && \
    DST_DIR_PATH="shared"
ALL_LIBS="$(find \
    /usr/lib /usr/libexec /usr/lib64 \
    /usr/lib32 /lib /lib64 /lib32 \
    -name '*.so*' 2>/dev/null|sort -u \
)"
binary_number=1
for binary in $BINARY_LIST
    do
        unset binary_real_name
        if [ -L "$binary" ]
            then
                binary_src_pth="$(readlink -f "$binary" 2>/dev/null)"
                binary_real_name="$(basename "$binary_src_pth" 2>/dev/null)"
            else
                binary_src_pth="$binary"
        fi
        binary_name="$(basename "$binary" 2>/dev/null)"
        [ -n "$DST_DIR_PATH" ] && \
            dst_dir_pth="$DST_DIR_PATH" \
            || dst_dir_pth="$binary_name"
        [[ -f "$dst_dir_pth" || -L "$dst_dir_pth" ]] && \
            dst_dir_pth="$dst_dir_pth.dir"
        bin_dir_pth="${dst_dir_pth}/bin"
        FILE_INFO="$(file "$binary_src_pth" 2>/dev/null)"
        IS_ELF32="$(grep -o 'ELF 32-bit'<<<"$FILE_INFO")"
        if [[ -n "$(grep 'ELF'<<<"$FILE_INFO"|grep -o 'executable')" ]]
            then
                # strace -e trace=openat "$binary_src_pth"|& grep '/lib.*\.so'|grep -v ENOENT|awk '{print$2}'|sed 's|^.||g;s|..$||g'|sort -u|xargs -I {} cp -f {} shared/lib/
                needed_libs="$(print_needed "$binary_src_pth")"
                LIBS="$(get_libs "$binary_src_pth" "$needed_libs")"
                if [[ -n "$LIBS" || "$STATIC_BINARY" == 1 ]]
                    then
                        if [ "$LIBS_ONLY" != 1 ]
                            then
                                INTERPRETER="$(basename "$(grep 'ld-linux'<<<"$LIBS"|cut -d'=' -f1|sed 's|\t||' )")"
                                [ ! -d "$bin_dir_pth" ] && \
                                    mkdir -p "$bin_dir_pth"
                                binary_dst_pth="$bin_dir_pth/$binary_name"
                                if [ -n "$binary_real_name" ]
                                    then
                                        [ ! -f "$bin_dir_pth/$binary_real_name" ] && \
                                            cp -f "$binary_src_pth" "$bin_dir_pth/"
                                        [[ "$binary_name" != "$binary_real_name" && ! -L "$binary_dst_pth" ]] && \
                                            (cd "$bin_dir_pth" && \
                                                ln -sf "$binary_real_name" "$binary_name")
                                    else
                                        [ ! -f "$binary_dst_pth" ] && \
                                            cp -f "$binary_src_pth" "$bin_dir_pth/"
                                fi
                                repath_needed_libs "$binary_dst_pth" "$needed_libs"
                                try_strip "$binary_dst_pth"
                                try_set_rpath "$binary_dst_pth"
                        fi
                        for lib_src_pth in $LIBS
                            do
                                unset lib_src_real_pth
                                if [ -L "$lib_src_pth" ]
                                    then
                                        lib_src_real_pth="$(readlink -f "$lib_src_pth" 2>/dev/null)"
                                        lib_src_dirname_pth="$(dirname "$lib_src_real_pth" 2>/dev/null)"
                                    else
                                        lib_src_dirname_pth="$(dirname "$lib_src_pth" 2>/dev/null)"
                                fi
                                lib_src_name="$(basename "$lib_src_pth" 2>/dev/null)"
                                grep -qE '/lib32|/i386-linux-gnu'<<<"$lib_src_dirname_pth" && \
                                    lib_dst_dir_pth="${dst_dir_pth}/lib32"||\
                                    lib_dst_dir_pth="${dst_dir_pth}/lib"
                                lib_dst_pth="$lib_dst_dir_pth/$lib_src_name"
                                [ ! -d "$lib_dst_dir_pth" ] && \
                                    mkdir -p "$lib_dst_dir_pth"
                                if [ -n "$lib_src_real_pth" ]
                                        then
                                            lib_src_real_name="$(basename "$lib_src_real_pth" 2>/dev/null)"
                                            [ ! -f "$lib_dst_dir_pth/$lib_src_real_name" ] && \
                                                cp -f "$lib_src_real_pth" "$lib_dst_dir_pth/"
                                            [[ "$lib_src_name" != "$lib_src_real_name" && ! -L "$lib_dst_pth" ]] && \
                                                (cd "$lib_dst_dir_pth" && \
                                                    [ ! -L "$lib_src_name" ] && \
                                                        ln -sf "$lib_src_real_name" "$lib_src_name")
                                        else
                                            [ ! -f "$lib_dst_pth" ] && \
                                                cp -f "$lib_src_pth" "$lib_dst_dir_pth/"
                                fi
                                repath_needed_libs "$lib_dst_pth"
                                try_strip "$lib_dst_pth"
                                [[ "$lib_dst_pth" =~ "$INTERPRETER" ]]||\
                                try_set_rpath "$lib_dst_pth"
                        done
                        if [ "$LIBS_ONLY" != 1 ]
                            then
                                (cd "$bin_dir_pth"
                                [[ "$PATCH_INTERPRETER" == 1 && -f "../lib/$INTERPRETER" ]] && \
                                    patchelf --set-interpreter "../lib/$INTERPRETER" "$binary_name")
                        fi
                        echo -e "$YELLOW[ $binary_number ]: $BLUE[$binary_name] $GREEN[ DONE ]$RESETCOLOR"
                        binary_number=$(( $binary_number + 1 ))
                    else
                        echo -e "$YELLOW[ SKIPPED ]: $BLUE[$binary_src_pth]$YELLOW ELF executable not dynamically linked!$RESETCOLOR"
                fi
            else
                echo -e "$YELLOW[ SKIPPED ]: $BLUE[$binary_src_pth]$YELLOW not ELF executable!$RESETCOLOR"
        fi
done

if [[ "$CREATE_LINKS" == 1 && -n "$(ls shared/bin 2>/dev/null)" ]]
    then
        [ ! -d bin ] && mkdir bin
        [ "$HARD_LINKS" == 1 ] && \
        LNARGS='-Pf'||LNARGS='-sf'
        (cd bin && for bin in $(ls ../shared/bin 2>/dev/null)
            do ln $LNARGS ../sharun "$bin"
        done)
fi
